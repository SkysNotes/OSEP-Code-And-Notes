#!/bin/bash

# Color codes
RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
LIGHT_RED='\033[1;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Starting Linux enumeration...${NC}"

# Function to enumerate users and groups
enumerate_users_groups() {
    echo -e "${BLUE}Enumerating users and groups...${NC}"
    
    # List all users and their groups
    while IFS=: read -r username _ _ _ _ _ homedir _; do
        echo -e "${YELLOW}User: ${username}${NC}"
        groups=$(groups "$username")
        echo -e "${YELLOW}Groups: $groups${NC}"

        # Check for groups that might allow lateral movement or priv esc
        if echo "$groups" | grep -qE "(sudo|wheel|admin|docker|root)"; then
            echo -e "${RED}[!] User ${username} is in a potentially dangerous group: $groups${NC}"
        fi
    done < /etc/passwd
}

# Function to check mail spools for possible passwords
check_mail_spools() {
    echo -e "${BLUE}Checking mail spools for possible passwords...${NC}"
    mail_spools="/var/mail /var/spool/mail"

    for spool in $mail_spools; do
        if [ -d "$spool" ]; then
            for file in "$spool"/*; do
                if [ -f "$file" ]; then
                    echo -e "${YELLOW}Checking $file for passwords...${NC}"
                    grep -Ei "(password|passwd|credentials|key)" "$file" && echo -e "${RED}[!] Possible credentials found in $file${NC}"
                fi
            done
        fi
    done
}

# Function to check for accessible SSH keys
check_ssh_keys() {
    echo -e "${BLUE}Checking for accessible SSH keys...${NC}"

    for user_dir in /home/* /root; do
        if [ -d "$user_dir/.ssh" ]; then
            for keyfile in "$user_dir/.ssh"/*; do
                if [ -f "$keyfile" ]; then
                    echo -e "${YELLOW}Found SSH key: $keyfile${NC}"
                    if [ -r "$keyfile" ]; then
                        echo -e "${RED}[!] SSH key is readable: $keyfile${NC}"
                    fi
                fi
            done
        fi
    done
}

# Function to check for binaries that could be exploited via sudo or other gtobin method
check_sudo_binaries() {
    echo -e "${BLUE}Checking for exploitable sudo binaries...${NC}"

    sudo -l | grep "(ALL)" | awk '{print $2}' | while read -r binary; do
        echo -e "${YELLOW}Potentially exploitable sudo binary: $binary${NC}"
    done
}

# Function to check for files in /opt or /usr/local/bin
check_opt_local_bin() {
    echo -e "${BLUE}Checking /opt and /usr/local/bin for interesting files...${NC}"

    find /opt /usr/local/bin -type f | while read -r file; do
        echo -e "${BLUE}Found file: $file${NC}"
        if [ -w "$file" ]; then
            echo -e "${YELLOW}[!] Writable file found: $file${NC}"
        fi
    done
}

# Function to check for common privilege escalation pathways
check_priv_esc_pathways() {
    echo -e "${BLUE}Checking for common privilege escalation pathways...${NC}"

    # Check for world writable files
    find / -type f -perm -0002 -exec ls -l {} + 2>/dev/null | while read -r file; do
        echo -e "${LIGHT_RED}[!] World writable file: $file${NC}"
    done

    # Check for SUID/SGID binaries
    find / -perm /6000 -type f 2>/dev/null | while read -r file; do
        echo -e "${LIGHT_RED}[!] SUID/SGID binary: $file${NC}"
    done

    # Check for cron jobs and scripts
    crontab -l 2>/dev/null | grep -v '^#' | while read -r cronjob; do
        echo -e "${LIGHT_RED}[!] Cron job: $cronjob${NC}"
    done

    find /etc/cron* /var/spool/cron* -type f 2>/dev/null | while read -r cronfile; do
        echo -e "${LIGHT_RED}[!] Cron job file: $cronfile${NC}"
    done
}

# Run the functions
enumerate_users_groups
check_mail_spools
check_ssh_keys
check_sudo_binaries
check_opt_local_bin
check_priv_esc_pathways

echo -e "${BLUE}Linux enumeration completed.${NC}"
